/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "./common";

export interface RedPacketInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "claimRedPacket"
      | "createRedPacket"
      | "getPacket"
      | "hasClaimed"
      | "nextId"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "RedPacketClaimed"
      | "RedPacketCreated"
      | "RedPacketFinished"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "claimRedPacket",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "createRedPacket",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getPacket",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "hasClaimed",
    values: [BigNumberish, AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "nextId", values?: undefined): string;

  decodeFunctionResult(
    functionFragment: "claimRedPacket",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createRedPacket",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getPacket", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "hasClaimed", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "nextId", data: BytesLike): Result;
}

export namespace RedPacketClaimedEvent {
  export type InputTuple = [
    id: BigNumberish,
    user: AddressLike,
    amount: BigNumberish
  ];
  export type OutputTuple = [id: bigint, user: string, amount: bigint];
  export interface OutputObject {
    id: bigint;
    user: string;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RedPacketCreatedEvent {
  export type InputTuple = [
    id: BigNumberish,
    sender: AddressLike,
    amount: BigNumberish,
    count: BigNumberish
  ];
  export type OutputTuple = [
    id: bigint,
    sender: string,
    amount: bigint,
    count: bigint
  ];
  export interface OutputObject {
    id: bigint;
    sender: string;
    amount: bigint;
    count: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RedPacketFinishedEvent {
  export type InputTuple = [id: BigNumberish];
  export type OutputTuple = [id: bigint];
  export interface OutputObject {
    id: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface RedPacket extends BaseContract {
  connect(runner?: ContractRunner | null): RedPacket;
  waitForDeployment(): Promise<this>;

  interface: RedPacketInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  claimRedPacket: TypedContractMethod<[id: BigNumberish], [void], "nonpayable">;

  createRedPacket: TypedContractMethod<
    [count: BigNumberish],
    [bigint],
    "payable"
  >;

  getPacket: TypedContractMethod<
    [id: BigNumberish],
    [
      [string, bigint, bigint, bigint, boolean] & {
        sender: string;
        total: bigint;
        remaining: bigint;
        remainingCount: bigint;
        finished: boolean;
      }
    ],
    "view"
  >;

  hasClaimed: TypedContractMethod<
    [id: BigNumberish, user: AddressLike],
    [boolean],
    "view"
  >;

  nextId: TypedContractMethod<[], [bigint], "view">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "claimRedPacket"
  ): TypedContractMethod<[id: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "createRedPacket"
  ): TypedContractMethod<[count: BigNumberish], [bigint], "payable">;
  getFunction(
    nameOrSignature: "getPacket"
  ): TypedContractMethod<
    [id: BigNumberish],
    [
      [string, bigint, bigint, bigint, boolean] & {
        sender: string;
        total: bigint;
        remaining: bigint;
        remainingCount: bigint;
        finished: boolean;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "hasClaimed"
  ): TypedContractMethod<
    [id: BigNumberish, user: AddressLike],
    [boolean],
    "view"
  >;
  getFunction(
    nameOrSignature: "nextId"
  ): TypedContractMethod<[], [bigint], "view">;

  getEvent(
    key: "RedPacketClaimed"
  ): TypedContractEvent<
    RedPacketClaimedEvent.InputTuple,
    RedPacketClaimedEvent.OutputTuple,
    RedPacketClaimedEvent.OutputObject
  >;
  getEvent(
    key: "RedPacketCreated"
  ): TypedContractEvent<
    RedPacketCreatedEvent.InputTuple,
    RedPacketCreatedEvent.OutputTuple,
    RedPacketCreatedEvent.OutputObject
  >;
  getEvent(
    key: "RedPacketFinished"
  ): TypedContractEvent<
    RedPacketFinishedEvent.InputTuple,
    RedPacketFinishedEvent.OutputTuple,
    RedPacketFinishedEvent.OutputObject
  >;

  filters: {
    "RedPacketClaimed(uint256,address,uint256)": TypedContractEvent<
      RedPacketClaimedEvent.InputTuple,
      RedPacketClaimedEvent.OutputTuple,
      RedPacketClaimedEvent.OutputObject
    >;
    RedPacketClaimed: TypedContractEvent<
      RedPacketClaimedEvent.InputTuple,
      RedPacketClaimedEvent.OutputTuple,
      RedPacketClaimedEvent.OutputObject
    >;

    "RedPacketCreated(uint256,address,uint256,uint256)": TypedContractEvent<
      RedPacketCreatedEvent.InputTuple,
      RedPacketCreatedEvent.OutputTuple,
      RedPacketCreatedEvent.OutputObject
    >;
    RedPacketCreated: TypedContractEvent<
      RedPacketCreatedEvent.InputTuple,
      RedPacketCreatedEvent.OutputTuple,
      RedPacketCreatedEvent.OutputObject
    >;

    "RedPacketFinished(uint256)": TypedContractEvent<
      RedPacketFinishedEvent.InputTuple,
      RedPacketFinishedEvent.OutputTuple,
      RedPacketFinishedEvent.OutputObject
    >;
    RedPacketFinished: TypedContractEvent<
      RedPacketFinishedEvent.InputTuple,
      RedPacketFinishedEvent.OutputTuple,
      RedPacketFinishedEvent.OutputObject
    >;
  };
}
